import React from 'react'
import './DataGrid.css'

export default class DataGrid extends React.Component {
    render() {
        return <div className="data-grid">

        </div>
    }
}

/*

import { AutoSizer, MultiGrid } from 'react-virtualized';

export default class DataGrid extends React.Component {
    state = {
        editing: undefined
    }

    handleStartSelect = (col, row) => {
        console.log(col, row);
        this.setState({
            editing: [col, row]
        });
    }

    handleInputBlur = (event) => {
        console.log("Blurred");
    }

    cellRenderer = ({ columnIndex, key, rowIndex, style }) => {
        const { data, maximum, minimum, width, axisX, axisY } = this.props.table;

        if (rowIndex === 0) {
            // Header
            if (columnIndex === 0) {
                return <span key={key} className="data-grid-spacer"></span>
            }
            return <span className="data-grid-header" key={key} style={style}>{axisX[columnIndex - 1]}</span>
        }
        if (columnIndex === 0) {
            return <span className="data-grid-header" key={key} style={style}>{axisY[rowIndex - 1]}</span>
        }

        const value = data[(rowIndex - 1)][columnIndex - 1];
        const colorAngle = 100 - (value - minimum) / (maximum - minimum) * 90;

        console.log(this.state.editing);

        const editing = this.state.editing && (this.state.editing[0] === columnIndex - 1 && this.state.editing[1] === rowIndex - 1);

        if (editing) {
            return <input
                key={key}
                style={{ borderLeft: 'none', borderTop: 'none', ...style }}
                className="data-grid-cell data-grid-cell-input"
                onBlur={this.handleInputBlur}
            />
        }

        return <span
            key={key}
            style={{ backgroundColor: "hsl(" + colorAngle + ", 100%, 30%)", ...style }}
            className="data-grid-cell"
            onClick={(event) => {
                event.preventDefault();
                this.handleStartSelect(columnIndex - 1, rowIndex - 1);
            }
            }>
            {value}
        </span>
    }

    render() {
        const { editing } = this.state;
        const { data, axisXLabel, axisYLabel, width } = this.props.table;
        const tableWidth = data[0].length; //width;
        const tableHeight = data.length;

        return <AutoSizer>
            {({ height, width }) => {
                //const gridWidth = Math.min(width, 70 * (tableWidth + 1) + 34 + 20);
                //const gridHeight = Math.min(height, 22 * (data.length / tableWidth + 1) + 34 + 20);

                const gridWidth = Math.min(width, 70 * (tableWidth + 1) + 34 + 20);
                const gridHeight = Math.min(height, 22 * (tableHeight + 1) + 34 + 20);

                return <div className="data-grid-container" style={{ width }}>
                    <div className="data-grid" style={{ width: gridWidth, height: gridHeight }}>
                        <span className="data-grid-xaxis">{axisXLabel}</span>
                        <div style={{ display: 'grid', gridTemplateColumns: '22px ' + (gridHeight - 34) + 'px' }}>
                            <span className="data-grid-yaxis">{axisYLabel}</span>
                            <MultiGrid
                                cellRenderer={this.cellRenderer}
                                columnCount={tableWidth + 1}
                                columnWidth={70}
                                rowCount={data.length + 1}
                                rowHeight={22}
                                width={gridWidth - 34}
                                height={gridHeight - 34}
                                enableFixedColumnScroll
                                enableFixedRowScroll
                                className="data-grid"
                                fixedColumnCount={1}
                                fixedRowCount={1}
                                hideBottomLeftGridScrollbar
                                hideTopRightGridScrollbar
                                style={{ background: 'var(--panel-bg-color)' }}
                                editing={editing}
                            />
                        </div>
                    </div>
                </div>
            }}
        </AutoSizer>
    }
}*/